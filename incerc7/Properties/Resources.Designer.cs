//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace incerc7.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("incerc7.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap edoi {
            get {
                object obj = ResourceManager.GetObject("edoi", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap etrei {
            get {
                object obj = ResourceManager.GetObject("etrei", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap eunu {
            get {
                object obj = ResourceManager.GetObject("eunu", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap mar {
            get {
                object obj = ResourceManager.GetObject("mar", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///.
        /// </summary>
        internal static string teorie {
            get {
                return ResourceManager.GetString("teorie", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///1.1 CURENTUL ELECTRIC 
        ///	Prin curent electric intelegem o deplasare dirijata (ordonata) de sarcini electrice. 
        ///Ex: fluxul de electroni care circula printr-un conductor metalic; fluxul de ioni (pozitivi si negativi) dintr-o baie de electroliza; fluxul de particule incarcate (ioni pozitivi, ioni negativi si electroni liberi) care alcatuiesc radiatiile emise de Soare, etc. 
        ///
        ///1.2 INTENSITATEA CURENTULUI ELECTRIC 
        ///	Fie un conductor prin care, in intervalul de timp Δt trece sarcina electrica ΔQ. Prin defini [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string teorie1 {
            get {
                return ResourceManager.GetString("teorie1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///2.1 TENSIUNEA ELECTROMOTOARE A UNUI  GENERATOR  ELECTRIC 
        ///	Pentru a transporta o sarcina electrica Q intre doua puncte din spatiu (de exemplu - intre doua puncte ale unui circuit electric), se consuma o energie W. Relatia intre acestea este:  , in care marimea U se numeste tensiune electrica intre cele doua puncte. 
        ///	
        ///	Tensiunea electrica intre doua puncte este o marime fizica scalara, numeric egala cu energia necesara transportarii unui Coulomb de electricitate intre cele doua puncte. Pentru unitatea  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string teorie2 {
            get {
                return ResourceManager.GetString("teorie2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///3.1 Notiunea de rezistenta electrica
        ///	Fie un conductor alimentat la tensiunea U. Prin acesta trece un curent electric cu intensitatea I. Prin definitie, rezistenta electrica a rezistorului este data de relatia: R=U/I . Metoda reducerii la unitate ne conduce la urmatoarea exprimare in cuvinte: rezistenta electrica a unui rezistor este o marime fizica scalara numeric egala cu tensiunea care, aplicata rezistorului, are ca efect aparitia unui curent de 1 A. Pentru unitatea de masura: [R]=[U]/[I]=V/A  ( Ohm ) [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string teorie3 {
            get {
                return ResourceManager.GetString("teorie3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 4 Dependenta rezistentei de dimensiuni 
        ///	Fie un conductor liniar, cilindric, cu lungimea l si sectiunea transversala S. Din punct de vedere electric, natura materialului este descrisa de o marime ρ,  numita rezistivitate (rezistenta specifica). Relatia intre aceste marimi este: R=Q*l/S . De aici deducem relatia de definitie pentru rezistivitate:  Q=R*S/l . Metoda reducerii la unitate (care impune conditiile: daca l = 1m si S = 1 m2), ne conduce la urmatoarea exprimare in cuvinte: rezistivitatea este o mari [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string teorie4 {
            get {
                return ResourceManager.GetString("teorie4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 5. GRUPAREA  REZISTENTELOR  SI  A  GENERATOARELOR ELECTRICE 
        ///
        ///5.1 Rezistenta electrica echivalenta gruparii serie 
        ///
        ///	Fie doi rezistori cu rezistentele electrice R1 respectiv R2, legati in serie intre ei. Ansamblul acestora este echivalent cu un singur rezistor Rs a carui rezistenta electrica este data de relatia: Rs=R1+R2.
        ///
        ///5.2 Rezistenta electrica echivalenta gruparii paralel
        /// 
        ///	Fie doi rezistori cu rezistentele electrice R1 respectiv R2, legati in paralel intre ei. Ansamblul acestora este echivale [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string teorie5 {
            get {
                return ResourceManager.GetString("teorie5", resourceCulture);
            }
        }
    }
}
